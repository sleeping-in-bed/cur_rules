---
# version 1.0.3
description: 规则
# 适用于项目中的所有文件
globs:
  - "**/*"
# 始终应用此规则
alwaysApply: true
---

# 通用规则

1.  你必须使用简体中文来回答。
2.  代码注释必须也用中文，除非之后明确要求其他语言。
3.  你在每次进行代码修改时，必须查看一下现在文件中的代码是什么，
    并在现在代码的基础上进行修改，因为我很有可能已经修改和优化了代码。
4.  注释中不要写“这次改了什么，修改了哪里“，以及其他没有意义的注释
5.  编写的代码必须要易于测试，比如使用“依赖注入”，“分离关注点”，“纯函数”等原则
6.  当我说创建一个示例时，默认就是最最最简单的示例，除非我明确说出创建什么样的示例
7.  应当只修改为了完成指定任务所必需的最少代码行，并尽可能地保持文件其余部分（包括格式、风格、结构和逻辑）的原貌

# Docker规则
1.  使用docker compose命令和compose.yml，compose.yml使用最新的语法，不要写version
2.  严禁更改docker镜像版本
3.  restart字段应该是unless-stopped
4.  不要用container_name，env_file，networks字段
5.  使用环境变量时不要提供默认值，比如${PORT:-80}
6.  写Dockerfile或者compose.yml时，必须查看当前host上现有的image，然后使用现有的image version

# Python规则

1.  Python的版本是3.12及以上，使用新语法（例如用 | 符号进行类型联合），禁止用旧版本的语法
2.  强制在代码中使用type hints，类型提示要写的非常详细，并让其可以通过mypy检查。
    一些难以知道其类型的变量也要写明类型，比如返回它的函数并没有注明其类型
3.  创建复杂且明确的数据结构时，优先使用Pydantic声明一个Model来表示
4.  敏感配置要分离，并放在.env文件中，用python-dotenv库加载，然后使用os库读取，
    并在必须要设置这个环境变量的地方，使用os.environ[]来读取，防止用户忘记配置这个环境变量
5.  不要写无用的异常处理，比如只在异常处理中打印一条消息，除非你真的推荐这样做。
    否则只有在真的能解决异常时，才写异常处理。
6.  项目使用uv包管理器来管理依赖
7.  项目使用pytest来测试，在项目根目录的tests文件夹下
