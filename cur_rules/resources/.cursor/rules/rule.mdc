---
# version 1.2.0
description: rule
# 适用于项目中的所有文件
globs:
  - "**/*"
# 始终应用此规则
alwaysApply: true
---

# 说明
1.  规则前有 ! 的，为最重要的规则

# 通用规则

1.  你必须使用简体中文来回答
2.  代码注释必须也用中文，除非明确要求使用其他语言
3.  你在每次进行代码修改时，必须查看一下现在文件中的代码是什么，
    并在现在代码的基础上进行修改，因为我很有可能已经修改和优化了代码
4.  注释中不要写“这次改了什么，修改了哪里“，以及其他没有意义的注释
5.  编写的代码必须要易于测试，比如使用“依赖注入”，“分离关注点”，“纯函数”等原则
6.  当我说创建一个示例时，默认就是最最最简单的示例，除非我明确说出创建什么样的示例
7.  !应当只修改为了完成指定任务所必需的最少代码行，并尽可能地保持文件其余部分（包括格式、风格、结构和逻辑）的原貌

# Docker规则
1.  使用docker compose命令和compose.yml，compose.yml使用最新的语法，不要写version
2.  严禁更改文件中的docker镜像版本
3.  restart字段应该是unless-stopped
4.  不要用container_name，env_file，networks字段
5.  使用环境变量时不要提供默认值，比如${PORT:-80}
6.  写Dockerfile或者compose.yml时，必须查看当前host上现有的image，然后使用现有的image version

# Python规则
1.  强制在代码中使用type hints，类型提示要写的非常详细，并让其可以通过mypy检查
    一些难以知道其类型的变量也要写明类型，比如返回它的函数并没有注明其类型
2.  创建复杂且明确的数据结构时，优先使用Pydantic声明Model来表示
3.  敏感配置要分离，并放在.env文件中，用python-dotenv库加载，然后使用os库读取，
    并在必须要设置这个环境变量的地方，使用os.environ[]来读取，防止用户忘记配置这个环境变量
4.  不要写无用的异常处理，比如只在异常处理中打印一条消息，除非你真的推荐这样做。
    否则只有在真的能解决异常时，才写异常处理
5.  项目使用uv包管理器来管理依赖，使用uv add来安装包
6.  项目使用pytest来测试，在项目根目录的tests文件夹下
7.  不要使用print，使用loguru
8.  使用pathlib而不是os.path
9.  让你修复lint问题时，调用ruff format && ruff check --fix，然后查看问题并进行修复，
    修复时，不要“为了修复而修复”，而是在绝对不影响现有功能的情况下，进行修复，会造成问题的，你可以不修复

# Python文档规则
1.  文件开头，类开头，每个函数中都要写 Google 格式的文档字符串
2.  一个标准的示例：
    """Raise a ValueError if the provided value is negative.

    It demonstrates how to document exceptions in a docstring.

    Args:
        value: An integer value.

    Returns:
        A string representation of the value.

    Yields:
        Integers from 0 to n-1.

    Raises:
        ValueError: If the value is negative.

    """
3.  常见的文档lint错误
  - (D200) One-line docstring should fit on one line
  - (D401) First line of docstring should be in imperative mood
  - (D404) First word of the docstring should not be "This"
  - (D413) Missing blank line after last section ("Returns")

# Python软件包版本
1. Python的版本是3.12及以上，使用新语法（例如用 | 符号进行类型联合）
2. Pydantic的版本是2.10以上
3. FastAPI的版本是0.115以上
4. 其他库的版本要求，请参考项目中的pyproject.toml文件或requirements.txt文件
